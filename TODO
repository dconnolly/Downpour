Rewrite feeds/checker so that it doesn't make me cry so much.
-- Make it parse feeds without the tv-show bias it has now. 
   Move that to functions that can be called if appropriate.
-- Lay out skeleton for twitter/non-rss feeds.

Keyword support for feeds.
-- Add procesed CSV Unicode() attribute to Feed model
-- Add keywords_matched CSV Unicode attribute to Download model
-- Add keywords_matched field/display in downloads/detail, requests and templates.
-- Add fields to add_feeds page and hook up the values to the request, 
   and web/feeds/Add.render_GET()
-- Add keyword parsing/sanitizing/checking functions to feed/checker, 
   call them in update/feed_parsed.

Allow organizing TV Series by Series/Season/Original.Filename.ext
-- This doesn't go in organization.rename_patterns as it is.
-- Pass in a string sub parameter to those patterns for the full filename.

Fix stacktrace on browse/ directory.sort() which barfs on unicode chars (eg ö)
-- The actual exception is in twisted.web.server.render(resrc) but I bet there is some 
   encoding or unicode param when calling that or establishing the server instance.
-- browse.py already does u'Motörhead' it looks like, this might need Unicode() explicitly?

Matching feeds by quality
-- Can have a separate field for checking quality of item (HDTV, 720p, BluRay, etc) but this is
   not much different than above once complete. 
   And uploaders are not always honest in their tagging anyway.
-- If we did this in the torrent parsing itself, it would be more accurate, 
   as the torrents often report aspect ratio/pixel HxW, size and running time, 
   which give more reliable data for HD/720/etc.

Feed name != Series Name
-- Do not map Feed Name to Series name when moving/renaming/organizing finished d
   ownloads from feeds.

Allow users to specify their own home dirs
-- Now the default is $DOWNPOUR_WORKING_DIR as specified in downpour.cfg, and then 
   $USERNAME/. This defeats the purpose of media server auto-organization on the fly.
-- Allow this directory to be specified in user settings/ edit user.
-- Update user/edit template and render_GET requests to include this field.

Allow users to specify their own organization/rename schemas.
-- Add an 'other' option in the selects on the Libraries view, that when selected makes
   the field appear to enter a new rename schema, with a div showing the different tokens
   and their usages
-- Possibly create a new model for these, which are attached to user accounts + libraries.
--- This will be more work to do it right, which means re-writing how rename schemas are stored
    as models in the store, etc, rather than just an array of strings as they are now.

Allow files within a download to be toggled off/on, during the download and during setup.
-- When starting a download manually (not automatically from a feed), after the torrent
   has been parsed, allow the files in the torrent to be toggled off (from a default of 'on')
   so that they will not be downloaded. EG for nfo files or samples we don't care about.
-- This can be added to the download view, so that a download's files can be toggled
   while in progress.
-- The download will be smart enough to update the percentage of download finished 
   so that the download will actually be marked complete when the files that we actually 
   care about have finished.

Create a Chrome(ium) extension that lets me right click torrent links and view context menu
add them to the download queue. 
-- Chrome extension js and background pages to add options to context menus for links
   or selected text to add to download queue.
-- Create some sort of twisted http listener that kicks off in the 
   application/Application.start() process, that listens for requests from the extension.
-- Requests will probably included GETs to see if downloads are already in the queue/active,
   POSTs to send new ones.
-- listener processes requests and if new+valid item, adds it to the dl queue.

Same as above, but instead of single downloads add feeds to my config. 
-- This could be as easy as opening the remote Downpour instance's add feed page with the feed
   url pre-filled.

Make download status bars update in realtime/ajax-time, instead of needing a refresh.