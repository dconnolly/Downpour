#!/usr/bin/env python
import pygtk
pygtk.require('2.0')
import gtk

from twisted.internet import gtk2reactor
gtk2reactor.install()

from downpour.remote.client import DownpourRemote
from twisted.internet import reactor
from twisted.internet.protocol import ClientCreator
from twisted.protocols import amp
from optparse import OptionParser
import logging
import os
import time

class DownpourTorrentHandler:

    config = {
            'host': 'http://localhost:6280',
            }

    file = None
    fileLabel = None
    statusLabel = None
    statusIcon = None
    mediaList = None
    queueButton = None
    settingsButton = None
    torrentData = None
    cancelButton = None
    options = None
    buttonBox = None

    mediaTypes = {
        'Music': 'audio/music',
        'Podcasts': 'audio/podcast',
        'Other Audio': 'audio/other',
        'Movies': 'video/movie',
        'TV Series': 'video/tv',
        'Other Video': 'video/other',
        'Photos': 'image/photos',
        'Other Images': 'image/other'
    }
    # Ordered list because python won't iterate through dicts
    # in the original key order
    mediaNames = ('Music', 'Podcasts', 'Other Audio', 'Movies',
        'TV Series', 'Other Video', 'Photos', 'Other Images')

    def add_torrent(self, widget, data=None):

        mediaTypeName = self.get_active_text(self.mediaList)
        mediaType = ''
        if mediaTypeName != 'None':
            mediaType = self.mediaTypes[mediaTypeName]

        remote = DownpourRemote(self.config['host'],
            username=self.config['username'],
            password=self.config['password'])

        response = remote.add_torrent(self.file, media_type=mediaType)
        response.addCallback(self.commandSuccess).addErrback(self.fatalError)

    def commandSuccess(self, result):

        if type(result).__name__ == 'dict' and 'error' in result:
            return self.fatalError(None, result['error'])

        self.statusLabel.set_markup('<i>The download has been queued</i>')
        self.statusIcon.set_from_stock(gtk.STOCK_INFO, gtk.ICON_SIZE_SMALL_TOOLBAR)
        self.statusLabel.show()
        self.statusIcon.show()
        self.statusBox.show()

        # Disable buttons
        self.mediaList.set_sensitive(False)
        self.queueButton.set_sensitive(False)
        self.settingsButton.set_sensitive(False)
        self.cancelButton.set_label('Close Window')

        reactor.callLater(1.0, self.window.destroy)

    def fatalError(self, failure, message=None):
        if failure is not None:
            if message is None:
                message = failure.getErrorMessage()
            failure.printTraceback()
        else:
            print message
        self.statusLabel.set_markup('<i>%s</i>' % message)
        self.statusIcon.set_from_stock(gtk.STOCK_DIALOG_ERROR, gtk.ICON_SIZE_SMALL_TOOLBAR)
        self.statusLabel.show()
        self.statusIcon.show()
        self.statusBox.show()

    def open_settings(self, widget, data=None):
        DownpourSettingsDialog(self)

    def delete_event(self, widget, event, data=None):
        return False

    def destroy(self, widget, data=None):
        reactor.stop()

    def get_active_text(self, combobox):
        model = combobox.get_model()
        active = combobox.get_active()
        if active < 0:
            return None
        return model[active][0]

    def keypress(self, widget, event) :
        if event.keyval == gtk.keysyms.Escape :
            self.destroy(None)

    def load_config(self):

        configfile = os.path.expanduser('~/.config/downpour/downpour-remote.cfg')
        if os.path.exists(configfile):
            f = open(configfile)
            lines = f.readlines()
            f.close()

            for line in lines:
                (key, value) = line.split('=')
                self.config[key.strip()] = value.strip()

    def write_config(self, config):

        self.config = config

        configdir = os.path.expanduser('~/.config/downpour')
        if not os.path.exists(configdir):
            os.makedirs(configdir)

        configfile = '%s/downpour-remote.cfg' % configdir
        f = open(configfile, 'w')
        for key in self.config:
            f.write('%s=%s\n' % (key, self.config[key]))
        f.close()
        
    def __init__(self, file, options):

        self.file = file
        self.options = options

        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)
        self.window.set_border_width(10)

        # Main layout box
        vbox = gtk.VBox(False, 6)

        table = gtk.Table(2, 3)
        table.set_row_spacings(6)
        table.set_col_spacings(12)

        # Filename field
        label = gtk.Label("Torrent:")
        label.set_alignment(0, 0.5)
        table.attach(label, 0, 1, 0, 1, gtk.FILL)
        label.show()

        self.fileLabel = gtk.Label();
        if file is None:
            self.fileLabel.set_markup("<i>None specified</i>")
        else:
            self.fileLabel.set_markup("<i>%s</i>" % os.path.basename(file))
        self.fileLabel.set_alignment(0, 0.5)
        table.attach(self.fileLabel, 1, 3, 0, 1, gtk.FILL)
        self.fileLabel.show()

        # Media type field
        label = gtk.Label("Media Type:")
        label.set_alignment(0, 0.5)
        table.attach(label, 0, 1, 1, 2, gtk.FILL)
        label.show()

        self.mediaList = gtk.combo_box_new_text()
        self.mediaList.append_text("None")
        for t in self.mediaNames:
            self.mediaList.append_text(t)
        self.mediaList.set_active(0)
        table.attach(self.mediaList, 1, 2, 1, 2, gtk.SHRINK)
        self.mediaList.show()

        label = gtk.Label()
        table.attach(label, 2, 3, 1, 2, gtk.EXPAND)
        label.show()

        vbox.pack_start(table, True)
        table.show()

        self.statusBox = gtk.EventBox()
        self.statusBox.modify_bg(gtk.STATE_NORMAL, gtk.gdk.color_parse('#FFFF99'))
        hbox = gtk.HBox(False, 6)
        label = gtk.Label()
        label.set_padding(6, 6)
        hbox.pack_start(label, True, True, 6)
        label.show()
        self.statusIcon = gtk.Image()
        hbox.pack_start(self.statusIcon, False, False)
        self.statusLabel = gtk.Label()
        hbox.pack_start(self.statusLabel, False, False)
        label = gtk.Label()
        label.set_padding(6, 6)
        hbox.pack_end(label, True, True, 6)
        label.show()

        self.statusBox.add(hbox)
        hbox.show()
        vbox.pack_start(self.statusBox)

        self.buttonBox = gtk.HBox(True, 6)

        self.queueButton = gtk.Button("Queue in Downpour")
        self.queueButton.connect("clicked", self.add_torrent, None)

        self.buttonBox.pack_start(self.queueButton)
        self.queueButton.show()

        self.settingsButton = gtk.Button("Settings...")
        self.settingsButton.connect("clicked", self.open_settings, None)

        self.buttonBox.pack_start(self.settingsButton)
        self.settingsButton.show()

        self.cancelButton = gtk.Button("Cancel Download")
        self.cancelButton.connect_object("clicked", gtk.Widget.destroy, self.window)

        self.buttonBox.pack_end(self.cancelButton)
        self.cancelButton.show()

        vbox.pack_end(self.buttonBox, True)
        self.buttonBox.show()

        self.window.add(vbox)
        vbox.show()

        self.window.set_title("Add Torrent to Downpour Queue")
        self.window.set_position(gtk.WIN_POS_CENTER_ALWAYS)
        self.window.connect("key-press-event", self.keypress)
        self.window.show()

        self.queueButton.grab_focus()

        self.load_config()

        if file is None:
            self.fatalError(None, 'No torrent file specified')
            self.mediaList.set_sensitive(False)
            self.queueButton.set_sensitive(False)
            self.cancelButton.set_label("Close Window")
        else:
            if os.access(file, os.R_OK):
                f = open(file)
                self.torrentData = f.read()
                f.close()
            else:
                self.fatalError(None, 'Unable to find file %s' % self.file)
                self.mediaList.set_sensitive(False)
                self.queueButton.set_sensitive(False)
                self.cancelButton.set_label("Close Window")

    def main(self):

        reactor.run()

class DownpourSettingsDialog:

    parent = None
    window = None

    host = None
    username = None
    password = None

    saveButton = None
    cancelButton = None

    def __init__(self, parent):

        self.parent = parent

        # Open a settings window here
        swin = gtk.Window(gtk.WINDOW_TOPLEVEL)
        swin.set_title("Downpour Settings")
        swin.set_position(gtk.WIN_POS_CENTER_ALWAYS)
        swin.connect("key-press-event", self.keypress)
        swin.set_border_width(10)

        # Main layout box
        vbox = gtk.VBox(False, 6)

        table = gtk.Table(3, 2)
        table.set_row_spacings(6)
        table.set_col_spacings(12)

        # Host field
        label = gtk.Label("Downpour URL:")
        label.set_alignment(0, 0.5)
        table.attach(label, 0, 1, 0, 1, gtk.FILL)
        label.show()

        self.host = gtk.Entry()
        self.host.set_text(parent.config['host']);
        self.host.set_width_chars(30)
        table.attach(self.host, 1, 2, 0, 1, gtk.FILL)
        self.host.show()

        # Username field
        label = gtk.Label("Username:")
        label.set_alignment(0, 0.5)
        table.attach(label, 0, 1, 1, 2, gtk.FILL)
        label.show()

        self.username = gtk.Entry()
        self.username.set_text(parent.config['username']);
        table.attach(self.username, 1, 2, 1, 2, gtk.FILL)
        self.username.show()

        # Password field
        label = gtk.Label("Password:")
        label.set_alignment(0, 0.5)
        table.attach(label, 0, 1, 2, 3, gtk.FILL)
        label.show()

        self.password = gtk.Entry()
        self.password.set_visibility(False)
        self.password.set_text(parent.config['password']);
        table.attach(self.password, 1, 2, 2, 3, gtk.FILL)
        self.password.show()

        vbox.pack_start(table, True)
        table.show()

        hbox = gtk.HBox(True, 6)

        self.cancelButton = gtk.Button("Close")
        self.cancelButton.connect_object("clicked", gtk.Widget.destroy, swin)

        hbox.pack_end(self.cancelButton, False)
        self.cancelButton.show()

        self.saveButton = gtk.Button("Save")
        self.saveButton.connect("clicked", self.save_settings, None)

        hbox.pack_end(self.saveButton, False)
        self.saveButton.show()

        label = gtk.Label()
        hbox.pack_start(label)
        label.show()

        vbox.pack_end(hbox, True, False)
        hbox.show()

        swin.add(vbox)
        vbox.show()

        self.window = swin
        swin.show()

        self.host.grab_focus()

    def save_settings(self, widget, data=None):
        settings = {
            'host': self.host.get_text(),
            'username': self.username.get_text(),
            'password': self.password.get_text()
            }
        self.parent.write_config(settings)
        self.window.destroy()

    def keypress(self, widget, event) :
        if event.keyval == gtk.keysyms.Escape:
            self.window.destroy()
        if event.keyval == gtk.keysyms.Return:
            self.save_settings(None)

if __name__ == "__main__":

    parser = OptionParser(add_help_option=False)
    parser.add_option("-t", "--type", dest="type", help="The type of media this torrent contains (music, tv, movie)")
    parser.add_option("--help", action="help", help="Display this help message")
    (options, args) = parser.parse_args()

    file = None

    if len(args) > 0:
        file = args.pop(0)

    handler = DownpourTorrentHandler(file, options)
    handler.main()
